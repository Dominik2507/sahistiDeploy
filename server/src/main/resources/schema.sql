/*
DROP TABLE IF EXISTS mjesecnaclan;
DROP TABLE IF EXISTS odgovara;
DROP TABLE IF EXISTS prijavljujetu;
DROP TABLE IF EXISTS prijavljujetr;
DROP TABLE IF EXISTS prijavljujeerr;
DROP TABLE IF EXISTS spring_session_attributes;
DROP TABLE IF EXISTS spring_session;
DROP TABLE IF EXISTS taktika;
DROP TABLE IF EXISTS trening;
DROP TABLE IF EXISTS turnir;
DROP TABLE IF EXISTS zahtjevregistracije;
DROP TABLE IF EXISTS zanimljivost;
DROP TABLE IF EXISTS administrator;
DROP TABLE IF EXISTS trener;
DROP TABLE IF EXISTS clan;
DROP TABLE IF EXISTS korisnik;
*/
CREATE TABLE IF NOT EXISTS korisnik
(
    email VARCHAR(100) NOT NULL,
    korisnickoIme VARCHAR(100) NOT NULL,
    lozinka VARCHAR(100) NOT NULL,
    osobaID INT GENERATED BY DEFAULT AS IDENTITY,
    blokiran INT NOT NULL,
    uloga VARCHAR(100) NOT NULL,
    PRIMARY KEY (osobaID)
);


CREATE TABLE IF NOT EXISTS administrator
(
    ime VARCHAR(100) NOT NULL,
    prezime VARCHAR(100) NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (osobaID),
    FOREIGN KEY (osobaID) REFERENCES korisnik(osobaID)
);

CREATE TABLE IF NOT EXISTS trener
(
    ime VARCHAR(100) NOT NULL,
    prezime VARCHAR(100) NOT NULL,
    titula VARCHAR(10) NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (osobaID),
    FOREIGN KEY (osobaID) REFERENCES korisnik(osobaID)
);

CREATE TABLE IF NOT EXISTS taktika
(
    taktikaID INT GENERATED BY DEFAULT AS IDENTITY,
    datumtaktika INT NOT NULL,
    maxBodova INT NOT NULL,
    ispravnoRjesenje VARCHAR(200) NOT NULL,
    aktivna INT NOT NULL,
    avgOcjena FLOAT NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (taktikaID),
    FOREIGN KEY (osobaID) REFERENCES trener(osobaID),
    UNIQUE(datumtaktika)
);

CREATE TABLE IF NOT EXISTS trening
(
    treningID INT GENERATED BY DEFAULT AS IDENTITY,
    mjesto VARCHAR(100) NOT NULL,
    datumtreninga DATE NOT NULL,
    vrijemetreninga VARCHAR(100) NOT NULL,
    trajanje INT NOT NULL,
    aktivni INT NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (treningID),
    FOREIGN KEY (osobaID) REFERENCES trener(osobaID)
);

CREATE TABLE IF NOT EXISTS turnir
(
    turnirID INT GENERATED BY DEFAULT AS IDENTITY,
    naziv VARCHAR(200) NOT NULL,
    datumturnira DATE NOT NULL,
    mjesto VARCHAR(100) NOT NULL,
    vrijemeturnir INT NOT NULL,
    aktivni INT NOT NULL,
    kapacitet INT NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (turnirID),
    FOREIGN KEY (osobaID) REFERENCES trener(osobaID)
);

CREATE TABLE IF NOT EXISTS zanimljivost
(
    zanimljivostID INT GENERATED BY DEFAULT AS IDENTITY,
    datumObjave DATE NOT NULL,
    opis VARCHAR(300) NOT NULL,
    naslov VARCHAR(200) NOT NULL,
    aktivni INT NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (zanimljivostID),
    FOREIGN KEY (osobaID) REFERENCES trener(osobaID)
);

CREATE TABLE IF NOT EXISTS clan
(
    ime VARCHAR(100) NOT NULL,
    prezime VARCHAR(100) NOT NULL,
    clanOd DATE NOT NULL,
    bodovi INT NOT NULL,
    suspendiran INT NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (osobaID),
    FOREIGN KEY (osobaID) REFERENCES Korisnik(osobaID)
);

CREATE TABLE IF NOT EXISTS mjesecnaclan
(
    mjesec INT NOT NULL,
    iznos FLOAT NOT NULL,
    datumUplate DATE NOT NULL,
    osobaID INT NOT NULL,
    PRIMARY KEY (mjesec, osobaID),
    FOREIGN KEY (osobaID) REFERENCES clan(osobaID)
);

CREATE TABLE IF NOT EXISTS odgovara
(
    ocjena INT NOT NULL,
    rjesenje VARCHAR(200) NOT NULL,
    osobaID INT NOT NULL,
    taktikaID INT NOT NULL,
    PRIMARY KEY (osobaID, taktikaID),
    FOREIGN KEY (osobaID) REFERENCES clan(osobaID),
    FOREIGN KEY (taktikaID) REFERENCES taktika(taktikaID)
);

CREATE TABLE IF NOT EXISTS prijavljujeTu
(
    osobaID INT NOT NULL,
    turnirID INT NOT NULL,
    PRIMARY KEY (osobaID, turnirID),
    FOREIGN KEY (osobaID) REFERENCES clan(osobaID),
    FOREIGN KEY (turnirID) REFERENCES turnir(turnirID)
);

CREATE TABLE IF NOT EXISTS prijavljujeTr
(
    osobaID INT NOT NULL,
    treningID INT NOT NULL,
    PRIMARY KEY (osobaID, treningID),
    FOREIGN KEY (osobaID) REFERENCES clan(osobaID),
    FOREIGN KEY (treningID) REFERENCES trening(treningID)
);

CREATE TABLE IF NOT EXISTS prijavljujeErr
(
    trenerID INT NOT NULL,
    poruka VARCHAR(200) NOT NULL,
    osobaID INT NOT NULL,
    datumtaktika INT NOT NULL,
    PRIMARY KEY (osobaID, datumtaktika),
    FOREIGN KEY (osobaID) REFERENCES clan(osobaID),
    FOREIGN KEY (datumtaktika) REFERENCES taktika(datumtaktika)
);

CREATE TABLE IF NOT EXISTS zahtjevRegistracije (
                                     osobaId int PRIMARY KEY,
                                     zahtjevUloga VARCHAR(100) NOT NULL,
                                     stanjeZahtjeva VARCHAR(100) NOT NULL,
                                     FOREIGN KEY (osobaID) REFERENCES korisnik(osobaid)
);

CREATE TABLE IF NOT EXISTS SPRING_SESSION (
                                PRIMARY_ID CHAR(36) NOT NULL,
                                SESSION_ID CHAR(36) NOT NULL,
                                CREATION_TIME BIGINT NOT NULL,
                                LAST_ACCESS_TIME BIGINT NOT NULL,
                                MAX_INACTIVE_INTERVAL INT NOT NULL,
                                EXPIRY_TIME BIGINT NOT NULL,
                                PRINCIPAL_NAME VARCHAR(100),
                                CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX IF NOT EXISTS SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX IF NOT EXISTS SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE IF NOT EXISTS SPRING_SESSION_ATTRIBUTES (
                                           SESSION_PRIMARY_ID CHAR(36) NOT NULL,
                                           ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
                                           ATTRIBUTE_BYTES BYTEA NOT NULL,
                                           CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
                                           CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
);